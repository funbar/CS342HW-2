import java.awt.GridLayout;
import java.awt.event.KeyEvent;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

public class Game extends JPanel{
	// there are 10 mines in our game every time, so we need to keep track of this.
	private int mines_left = 10;
	// I feel as if the timer should be a float, but we'll keep it as an int for now.
	private int timer = 0;
	
	private final int rows    = 10;
	private final int columns = 10;
	
	// Declaring a 2d array for our JButtons.
	private JButton grid[][];
	
	// Constructor for our Game class.
	public Game() 
	{

		JPanel score_board = new JPanel(new GridLayout(2, 3, 5, 3));
		//this.setSize(400, 400);
		this.setLayout(new GridLayout(10, 10));  
		grid = new JButton[rows][columns];
		buildGrid();
		
		/*
		 * use new ImageIcon ("image path in project") to add pictures instead of text
		 */
		
		
	}
	
	public void gameStart()
	{
		menuBar();
		buildGrid();
	}
	
	private void buildGrid()
	{
		for(int i = 0; i<rows; i++)
		{
			for(int j = 0; j<columns; j++)
			{
				grid[i][j] = new JButton();
				//grid[i][j].setSize(100, 100);
				this.add(grid[i][j]);
			}
		}
	}
	
	private void menuBar()
	{
		/*
		 * TODO new JMenu object instance here.
		 */
		// The "window" at the very top
		JFrame frame = new JFrame("Minesweeper");
		// add an instance of the game object.
		frame.add(new Game());
		// controls size of entire grid.
		frame.setSize(500,  500);
		// allows the program to respond when user wants to close the frame.
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		
		// must be initialized first
		JMenuBar menuBar = new JMenuBar();
		// the keyword that the user sees
		JMenu menu = new JMenu("Game");
		// VK_G pretty much means alt + G
		menu.setMnemonic(KeyEvent.VK_G);
		// adding everything to the actual bar. kind of like a struct and setting members
		menuBar.add(menu);
		frame.setJMenuBar(menuBar);
		//JMenuItem menuExit = new JMenuItem();
		
	}
	
	private void generateMines()
	{
		/*
		 * create mines for the games
		 */

		
	}
	
	private void randomizer()
	{
		/*
		 * probably not necessary, but if we need a randomized method outside of the traditional method, 
		 * we can implement out own. Used for randomly placing mines, etc.
		 */
	}
	
	private void topScores()
	{
		/*
		 * List of top scores - top 10
		 */
	}
	
	private void reset()
	{
		/*
		 * TODO: we'll need to reset both the game and also the top scores at one point.
		 */
	}
	
	
}
